<%= javascript_include_jquery %>
<%= javascript_include_tag "jquery.flot.all" %>

<%
data = teams[0,3].map{|t| Team.get_historical_ratings_2_weeks(t.id)  }
%>

<div id="rating" style="width: 550px;
          height: 200px;
          font-size: 14px;
          line-height: 1.2em;">
</div>

<script type="text/javascript">
  jQuery(function() {
    var $ = jQuery;

    var getColor = function(index) {
      var colorValues = [ "#cb4b4b", "#4da74d", "#9440ed", "#afd8f8", "#edc240" ];
      var arrayIndex = index % colorValues.length;
      var variationIndex = Math.floor(index / colorValues.length);
      var variation = Math.pow(-1, variationIndex) * 0.2 * Math.floor((variationIndex + 1) / 2);
      return $.color.parse(colorValues[arrayIndex]).scale('rgb', 1 + variation).toString();
    };

    var ratingData = {
<% teams.each_with_index do |t,i| %>
      <%= t.id %>: {
        data: <%= data[i].to_json.html_safe %>,
        label: "<%= t.name %>",
        lines: { show: true, lineWidth: "1" },
        points: { show: false },
        color: getColor(<%= i %>),
      },
<% end %>
    };

    var writeTooltip = function(pos, points) {
      if (points.length == 0) {
        $("#tooltip").hide();
        return;
      }
      $("#tooltip").html(
        "<table>" +
        points.reduce(function(acc, cur) {
          if (cur.point[1] == null) return acc;
          var div = '<tr><td><div style="border:1px solid #ccc;padding:1px"><div style="width:4px;height:0;border:5px solid ' + cur.color + ';overflow:hidden"></div></div></td>';
          return acc + div + "<td>" + cur.label + "</td><td>" + cur.point[1].toFixed(2) + "</td></tr>";
        }, "") +
        "<tr><td colspan=3 style='text-align: center'>" + new Date(points[0].point[0]*1000).toISOString().slice(0, 10) + "</tr>"
      ).css({top: pos.pageY + 10, left: pos.pageX + 10}).fadeIn(200);
    };

    var getMissingDataAndPlotRatings = function(from, to) {
      var pending = false;
      $("input:checked").each(function () {
        var key = $(this).attr("name");
        var rating = ratingData[key];
        if (key && rating) {
          if (rating.data == null) {
            pending = true;
            $.ajax({
              url: "<%= url_for action: :historical_rating %>/" + key,
              dataType: "json",
            }).done(function(data) {
              rating.data = data;
              plotRatings(from, to);
            });
          }
        }
      });
      if (!pending) {
        plotRatings(from, to);
      }
    };

    var plotRatings = function(from, to) {
      if (from === undefined) {
        from = Number.NEGATIVE_INFINITY;
      }
      if (to === undefined) {
        to = Number.POSITIVE_INFINITY;
      }
      var graphDiv = $("#rating");
      var data = [];
      var x_values = new Set();
      var ymin = Number.POSITIVE_INFINITY, xmin = Number.POSITIVE_INFINITY;
      var ymax = Number.NEGATIVE_INFINITY, xmax = Number.NEGATIVE_INFINITY;

      $("input:checked").each(function () {
        var key = $(this).attr("name");
        var rating = ratingData[key];
        if (key && rating) {
          var d = rating.data.filter(function(x) { return x[0] >= from && x[0] <= to; });
          data.push({
            data: d,
            label: rating.label,
            lines: rating.lines,
            points: rating.points,
            color: rating.color,
          });
          d.each(function (p) {
            x_values.add(p[0]);
            if (p[0] > xmax) xmax = p[0];
            if (p[0] < xmin) xmin = p[0];
            if (p[1] > ymax) ymax = p[1];
            if (p[1] && p[1] < ymin) ymin = p[1];
          });
        }
      });

      // Add missing points
      var x_values_sorted = [...x_values].sort()
      data.each(function(series) {
        var next_point = 0;
        x_values_sorted.each(function(x) {
          if (series.data.length == next_point || series.data[next_point][0] != x) {
            series.data.splice(next_point, 0, [x, null]);
          }
          next_point++;
        });
      });

      var ydelta = ymax - ymin;
      if (ydelta < 1) ydelta = 1;
      ymin = ymin - ydelta * 0.1;
      ymax = ymax + ydelta * 0.1;

      if (ymin < 0) {
        ymin = 0;
      }
      if (ymax > 100) {
        ymax = 100;
      }

      var ratingOptions = {
        selection: {
          mode: "x"
        },
        xaxis: {
          mode: "time",
          min: Math.max(xmin, from),
          max: Math.min(xmax, to),
        },
        yaxis: {
          min: ymin,
          max: ymax,
        },
        grid: {
          hoverable: true,
          clickable: true,
          autoHighlight: false,
        },
        legend: {
          show: false,
        },
      };

      plot = graphDiv.plot(data, ratingOptions).data("plot");

      graphDiv.off("plothover");
      graphDiv.on("plothover", function(event, pos, item) {
        plot.getOptions().grid.markings = [];
        plot.getData().each(function(x) {
          x.lines.lineWidth = 1;
        });
        plot.draw();

        if (item) {
          var data = plot.getData();
          data[item.seriesIndex] = data[data.length-1];
          data[data.length-1] = item.series;
          item.series.lines.lineWidth = 5;
          plot.draw();
          writeTooltip(pos, [{label: item.series.label, point: item.datapoint, color: item.series.color}]);
          return;
        }

        var axes = plot.getAxes();
        if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max ||
          pos.y < axes.yaxis.min || pos.y > axes.yaxis.max) {
          $("#tooltip").hide();
          return;
        }

        var i, j, dataset = plot.getData();

        var ys = [];
        for (i = 0; i < dataset.length; ++i) {
          var series = dataset[i];
          // Find the nearest points, x-wise
          for (j = 0; j < series.data.length; ++j) {
            if (series.data[j][0] > pos.x) {
              break;
            }
          }
          var closest,
            p1 = series.data[j - 1],
            p2 = series.data[j];
          if (p1 == null && p2 == null) {
            continue;
          } else if (p1 == null) {
            closest = p2;
          } else if (p2 == null) {
            closest = p1;
          } else {
            closest = pos.x - p1[0] < p2[0] - pos.x ? p1 : p2;
          }
          if (closest[1] != null) {
            ys.push({label: series.label, point: closest, color: series.color});
          }
        }
        if (ys.len > 0) {
          ys.sort(function(a, b) { return b.point[1] - a.point[1]; });
          writeTooltip(pos, ys);
          plot.getOptions().grid.markings = [{ xaxis: { from: ys[0].point[0], to: ys[0].point[0] }, color: "rgba(0,0,0,0.15)" }];
        }
        plot.draw();
      });

      graphDiv.off("plotselected");
      graphDiv.on("plotselected", function (event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 32*24*3600) {
          plot.clearSelection();
          return;
        }

        // do the zooming
        plotRatings(ranges.xaxis.from, ranges.xaxis.to);
      });

      graphDiv.off("dblclick");
      graphDiv.dblclick(function (event) {
        getMissingDataAndPlotRatings();
      });
      $("input.ratingSelector").off("change");
      $("input.ratingSelector").change(function() {getMissingDataAndPlotRatings(from, to);});
   }

    $("<div id='tooltip'></div>").css({
      position: "absolute",
      display: "none",
      border: "1px solid #fdd",
      padding: "2px",
      "text-align": "left",
      "background-color": "#fee",
      opacity: 1.00,
      zIndex: 0,
    }).appendTo("body");

    plotRatings();
  });
</script>
