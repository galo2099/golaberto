<% omit_columns = {} if omit_columns.nil? %>
<% omit_logo = false if omit_logo.nil? %>
<% omit_comments = false if omit_comments.nil? %>
<% omit_popup = false if omit_popup.nil? %>
<% show_country = false if show_country.nil? %>
<% cache [ "v1",
           I18n.locale,
           digest_cache_key(group.teams),
           group,
           group.phase,
           group.phase.championship,
           link_to_group,
           omit_columns,
           omit_logo,
           omit_comments,
           omit_popup,
           show_country ] do %>
<div style="position: relative; margin-left: 2px; margin-right: 2px;">
  <div style="width: 100%; float: left; position: relative;"><h3><span><%=
    if link_to_group
      link_to group.name,
              :controller => 'championship',
              :action => 'games',
              :id => group.phase.championship,
              :phase => group.phase,
              :group => group
    else
      h group.name
    end%></span></h3>
  </div>
  <% if not omit_columns[:odds] then %>
    <div id="recalculate<%= group.id %>" style="position: absolute; bottom: 0px; right: 0px;" data-authorize="group">
      <% if group.odds_progress then %>
        <%= _("Odds being recalculated") %>. <%= sprintf _("%d%% done."), group.odds_progress %>
        <%= javascript_tag "watch_odds(#{group.id})" %>
      <% else %>
        <%= button_tag _("Recalculate odds"), onclick: "recalculate_odds(#{group.id}); return false;" %>
      <% end %>
    </div>
  <% end %>
  <div class="clearer"></div>
</div>

<table class='class_table'>
  <tr class='table_head'>
    <%= content_tag :th, _("#"), class: "pos" unless omit_columns[:Pos] %>
    <%= content_tag :th, _("Name"), class: "name" unless omit_columns[:Name] %>
    <%= content_tag :th, _("Pts") unless omit_columns[:Pts] %>
    <%= content_tag :th, _("G") unless omit_columns[:G] %>
    <%= content_tag :th, _("W") unless omit_columns[:W] %>
    <%= content_tag :th, _("D") unless omit_columns[:D] %>
    <%= content_tag :th, _("L") unless omit_columns[:L] %>
    <%= content_tag :th, _("GF") unless omit_columns[:GF] %>
    <%= content_tag :th, _("GA") unless omit_columns[:GA] %>
    <%= content_tag :th, _("GD") unless omit_columns[:GD] %>
    <% if not omit_columns[:odds] then %>
      <%= content_tag :th, "", class: "odds_spacing" %>
      <%= content_tag :th, class: "odds", style: "text-align: center" do -%>
        <select id="oddsSelect_<%= group.id %>" tabindex=1>
        <% group.zones.each do |zone| %>
          <option value="<%= zone["name"] %>" data-title="<%= sprintf(_("odds of %s"), zone["name"])%>" data-color="<%= zone["color"]%>">â–£</option>
        <% end %>
        <% (1..group.teams.size).each do |i| %>
          <option value="<%= i %>" title="<%= sprintf(_("odds of %s"), i)%>"><%=i%></option>
        <% end %>
        </select>
        <style>
        .ui-selectmenu-button.ui-button {
          width: auto;
        }
        .ui-button:hover .ui-icon,
        .ui-button:focus .ui-icon,
        .ui-button .ui-icon {
              background-image: url(https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/blitzer/images/ui-icons_004276_256x240.png);
        }
        .ui-selectmenu-button span.ui-selectmenu-text {
          padding: 0 0 0 0.3em
        }
        .ui-selectmenu-button span.ui-icon {
          right: 0.1em
        }
        .ui-button {
          padding: 0
        }
        .ui-widget {
          font-size: 1em
        }
        </style>
        <script type="text/javascript">
          $.widget("custom.iconselectmenu", $.ui.selectmenu, {
						_create: function() {
							this._super();
							this._setTabIndex();
						},
						_setTabIndex: function() {
							this.button.attr( "tabindex",
									this.options.disabled ? -1 :
									this.element.attr( "tabindex" ) || 0 );
						},
						_setOption: function( key, value ) {
							this._super( key, value );
							if ( key === "disabled" ) {
								this._setTabIndex();
							}
						},
            _renderButtonItem: function(item) {
              var buttonItem = $("<span>");
              this._setText(buttonItem, item.label);
              this._addClass(buttonItem, "ui-selectmenu-text");
              buttonItem.css("color", item.element.attr("data-color"));
              return buttonItem;
            },
            _renderItem: function(ul, item) {
              var li = $( "<li>" )
                .css("color", item.element.attr("data-color"));
              var wrapper = $( "<div>", {
                title: item.element.attr( "title" )
              } );

              if ( item.disabled ) {
                this._addClass( li, null, "ui-state-disabled" );
              }
              this._setText( wrapper, item.label );
              return li.append( wrapper ).appendTo( ul );
            },
          });
          $("#oddsSelect_<%=group.id%>").iconselectmenu({
            width: false,
            change: function(event, ui) {
              $("td[data-group-id=<%=group.id%>][data-zone-name]").each(function(index) {
                $(this).hide();
              });
              $("td[data-group-id=<%=group.id%>][data-zone-name='" + ui.item.value + "']").each(function(index) {
                $(this).show();
              });
            }
          });
        </script>
      <% end -%>
    <% end %>
  </tr>
  <% pos = 0 %>
  <% notes = Array.new %>
  <% max_form = 0 %>
  <% group.team_table.each do |t|
    stats = t[1]
    max_form = [stats.form.last(5).size, max_form].max
  end %>
  <% group.team_table.each do |t|
    team = t[0].team
    stats = t[1]
    note_number = ""
    unless omit_comments
      if t[0].comment
        notes.push t[0].comment
        note_number = " (#{notes.size})"
      end
    end
    form = ""
    unless omit_columns[:Form]
      last_5_form = stats.form.last(5)
      while last_5_form.size < max_form do
        last_5_form.push(nil)
      end
      form = last_5_form.map do |f|
        case f
        when "w"
          "<span style='color: green; font-size: x-small'>\u2688</span>"
        when "d"
          "<span style='color: yellow; font-size: x-small'>\u2688</span>"
        when "l"
          "<span style='color: red; font-size: x-small'>\u2688</span>"
        else
          "<span style='color: #00000000; font-size: x-small'>\u2688</span>"
        end
      end.join
    end
    pos += 1
    tr_class = 'table_line'
    # Calculate style for the current row based on 'pos' (team's rank)
    first_matching_zone_color = nil
    # Ensure 'group' is the correct variable for the current group context in the file.
    # It was 'group' in previous versions of _table.html.erb for the iteration.
    current_group_for_table = group # Assuming 'group' is the iteration variable from team_table

    if current_group_for_table&.zones.is_a?(Array)
      current_group_for_table.zones.each do |zone|
        if zone.is_a?(Hash) && zone["position"].is_a?(Array) && zone["color"].is_a?(String) && zone["position"].include?(pos)
          first_matching_zone_color = zone['color']
          break # Found the first one, stop searching
        end
      end
    end

    row_style_attribute_value = "" # Initialize
    if first_matching_zone_color
      row_style_attribute_value = "background-color: #{first_matching_zone_color};"
    end
    country_logo = ""
    if show_country
      country_logo = image_tag(team.small_country_logo, :width => 15, :height => 15, :title => _(team.country))
    end
    image_logo = ""
    unless omit_logo
      image_logo = image_tag(team.logo.url(:thumb),
                             size: team.logo.styles[:thumb].geometry)
    end
    title_popup = ""
    unless omit_popup
      last_game = stats.last_game
      next_game = stats.next_game
      header_body = ""
      unless last_game.nil?
        header_body << sprintf("%02d", game_date(last_game).day) << "/"
        header_body << sprintf("%02d", game_date(last_game).month) << " "
        header_body << add_wbr_to_string(h(last_game.home.name)) << " "
        header_body << last_game.home_score.to_s << " x "
        header_body << last_game.away_score.to_s << " "
        header_body << add_wbr_to_string(h(last_game.away.name)) << "<br/>"
      end
      unless next_game.nil?
        header_body << sprintf("%02d", game_date(next_game).day) << "/"
        header_body << sprintf("%02d", game_date(next_game).month) << " "
        header_body << add_wbr_to_string(h(next_game.home.name)) << " x "
        header_body << add_wbr_to_string(h(next_game.away.name)) << "<br/>"
      end
      title_popup = "header=[] body=[#{header_body}] cssbody=[popupbody]"
    end
  %>
<tr class='<%= tr_class %>' style="<%= row_style_attribute_value %>" data-rank="<%= pos %>" data-group-id="<%= group.id %>">
         <%= content_tag :td, pos, class: "pos" unless omit_columns[:Pos] %>
         <%= content_tag(:td,
                         ((content_tag :span, form.html_safe) + " " + country_logo + " " + image_logo + " " +
                         link_to(add_wbr_to_string(team.name), :action => 'team',
                                            :id => group.phase.championship,
                                            :team => team) +
                         note_number).html_safe,
                         :class => "name",
                         :title => title_popup) unless omit_columns[:Name] %>

         <%= content_tag :td, stats.points unless omit_columns[:Pts] %>
         <%= content_tag :td, stats.games unless omit_columns[:G] %>
         <%= content_tag :td, stats.wins unless omit_columns[:W] %>
         <%= content_tag :td, stats.draws unless omit_columns[:D] %>
         <%= content_tag :td, stats.losses unless omit_columns[:L] %>
         <%= content_tag :td, stats.goals_for unless omit_columns[:GF] %>
         <%= content_tag :td, stats.goals_against unless omit_columns[:GA] %>
         <%= content_tag :td, stats.goals_diff unless omit_columns[:GD] %>
         <% if not omit_columns[:odds] then %>
           <%= content_tag :td, "", class: "odds_spacing" %>
           <% first = true %>
           <% group.zones.each do |zone| %>
             <% odds = t[0].calculate_odds(zone["position"]) %>
             <%= content_tag :td, odds ? number_to_rounded(odds, precision: 2) : "", "data-group-id": group.id, "data-zone-name": zone["name"], class: "odds", style: "background-color: #{zone["color"]}; display: #{first ? "table-cell" : "none"}" %>
             <% first = false %>
           <% end %>
           <% (1..group.teams.size).each do |i| %>
             <% odds = if t[0].odds then t[0].odds[i-1] end %>
             <%= content_tag :td, odds ? number_to_rounded(odds, precision: 2) : "", "data-group-id": group.id, "data-zone-name": i, class: "odds", style: "background-color: lightgray; display: #{first ? "table-cell" : "none"}" %>
             <% first = false %>
           <% end %>
         <% end %>
       </tr>
     <% end %>
   </table>
   <% count = 0 %>
   <% notes.each do |n| %>
     <% count += 1 %>
     <%= "(#{count}) #{n}" %><br/>
   <% end %>
<% end  # caching %>
<script type="text/javascript">
  // Ensure the global object exists
  window.championshipTableZoneData = window.championshipTableZoneData || {};
  // Store data for the current group, keyed by group ID
  window.championshipTableZoneData['group_<%= group.id %>'] = {
    zones: <%== group.zones.select{|z| z.is_a?(Hash) && z['name'].is_a?(String) && z['position'].is_a?(Array) && z['color'].is_a?(String)}.map{|z| {name: z['name'], color: z['color'], positions: z['position']}}.to_json.html_safe %>,
    defaultRowColors: {} // This will be populated by JavaScript on document ready
  };

$(document).ready(function() {
  // Initialize default colors and attach event handlers for all relevant tables
  // This assumes that window.championshipTableZoneData is populated by ERB
  // as specified in the HTML modification part of the task.

  $('select[id^="oddsSelect_"]').each(function() {
    var selectElement = $(this);
    var groupId = selectElement.attr('id').replace('oddsSelect_', '');
    var currentGroupDataKey = 'group_' + groupId;
    var currentGroupData = window.championshipTableZoneData ? window.championshipTableZoneData[currentGroupDataKey] : null;

    if (currentGroupData) {
      // Store default colors for rows associated with this specific group
      $('tr[data-group-id="' + groupId + '"][data-rank]').each(function() {
        var row = $(this);
        var rank = parseInt(row.data('rank'));
        var defaultColor = 'transparent'; // Default if no specific color is found

        // Try to get the background-color from the inline style attribute first
        var styleAttr = row.attr('style');
        if (styleAttr) {
          var bgColorMatch = styleAttr.match(/background-color:\s*([^;]+)/);
          if (bgColorMatch && bgColorMatch[1]) {
            defaultColor = bgColorMatch[1];
          } else {
            // If background-color is not in style, it might be a gradient.
            // In this case, the concept of a single "default" color is less clear.
            // We'll keep it transparent or decide on a specific handling.
            // For now, if it's a gradient, the default is transparent,
            // and selecting a zone will override the gradient.
            var bgImageMatch = styleAttr.match(/background-image:\s*linear-gradient\(([^)]+)\)/);
            if (bgImageMatch) {
              // It's a gradient, store the full style attribute to reapply if needed,
              // or store 'transparent' if we want to clear it when no zone is selected.
              // For simplicity here, if it's a gradient, we'll treat its default as 'transparent'
              // for the purpose of a single color fallback. The ideal would be to store the gradient.
              // However, the requirement is to revert to "first zone color", which is simpler.
              // The provided ERB logic already sets background-color for the first zone.
              // So, if `bgColorMatch` failed, it means no single background-color was set.
            }
          }
        }

        // If still transparent (or wasn't set via inline background-color),
        // try getting computed style, though this can be tricky if it's from CSS classes for even/odd.
        // The ERB logic should preferentially set a background-color.
        if (defaultColor === 'transparent') {
            var computedColor = row.css('background-color');
            if (computedColor && computedColor !== 'rgba(0, 0, 0, 0)' && computedColor !== 'transparent') {
                defaultColor = computedColor;
            }
        }
        currentGroupData.defaultRowColors[rank] = defaultColor;
      });

      selectElement.bind("iconselectmenuchange", function() {
        var selectedValue = $(this).val(); // This is the zone name or a rank number string
        var groupData = window.championshipTableZoneData ? window.championshipTableZoneData[currentGroupDataKey] : null;
        if (!groupData) return;

        // Attempt to find if the selected value is one of the zone names
        var selectedZone = groupData.zones.find(function(z) { return z.name === selectedValue; });

        $('tr[data-group-id="' + groupId + '"][data-rank]').each(function() {
          var row = $(this);
          var rank = parseInt(row.data('rank'));
          var newColor = groupData.defaultRowColors[rank] || 'transparent'; // Fallback to its stored default

          if (selectedZone) { // A specific zone is selected from the dropdown
            if (selectedZone.positions.includes(rank)) {
              newColor = selectedZone.color;
            } else {
              // If a zone is selected, but this rank is NOT in it, revert to default.
              // (This behavior might need adjustment if requirements are different,
              // e.g., keep current color, or make it white/grey)
              // For now, it reverts to its original default (which could be transparent or first-zone color)
            }
          }
          // If selectedValue is not a zone name (e.g., it's a rank for odds display, or the default "select zone" option)
          // then selectedZone will be undefined, and all rows will revert to their default colors.

          row.css('background-image', ''); // Clear any potential gradient
          row.css('background-color', newColor);
        });
      });
    }
  });
});

</script>
