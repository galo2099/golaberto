<% content_for :title do %>
  <%= @championship.full_name %> - <%= @team.name %>
<% end %>
<% content_for :main_title do %>
  <%= @championship.full_name %>
<% end %>

<%= javascript_include_jquery %>
<%= javascript_include_tag "jquery.flot" %>
<select id='team_select'>
  <%= options_from_collection_for_select @teams, "to_param", "name", @team.to_param %>
</select>

<% team_url = url_for(:controller => :championship, :action => :team, :id => @championship, :team => "") %>
<%= observe_field 'team_select', :function => "document.location = '#{team_url}' + value" %>

<h2><%= image_tag @team.logo.url(:medium), size: @team.logo.styles[:medium].geometry %>
  <%= link_to add_wbr_to_string(@team.name), :controller => :team, :action => :show, :id => @team %>
</h2>

<% if @groups[0].team_groups.select{|t|t.team_id == @team.id}.first.odds and @groups[0].phase.games.where(played: false).size > 0 then %>
<div id="odds" style="width: 550px;
          height: 200px;
          font-size: 14px;
          line-height: 1.2em;">
</div>

<% team_position = @groups[0].team_table.find_index{|t,s|t.team_id == @team.id} + 1 %>
<style>
div#odds div.flot-x-axis div.flot-tick-label:nth-child(<%=team_position%>) {
  color: #ff0000;
}
</style>

<script type="text/javascript">
  jQuery(function() {
		jQuery("<div id='odds_tooltip'></div>").css({
			position: "absolute",
			display: "none",
			border: "1px solid #fdd",
			padding: "2px",
			"background-color": "#fee",
      opacity: 0.80,
      zIndex: 0,
		}).appendTo("body");

    var graphDiv = jQuery("#odds");
    var options = {
      series: {
        bars: {
          show: true,
          barWidth: 0.7,
          align: "center",
          fillColor: "rgba(255, 255, 255, 0.7)",
        },
      },
      xaxis: {
        min: 0.5,
        max: <%= @groups[0].team_groups.size + 0.5 %>,
        ticks: <%= (1..@groups[0].team_groups.size).to_a.map{|x|[x, x]}.to_json %>,
      },
      grid: {
        hoverable: true,
        clickable: true,
        markings: <%== @groups[0].zones.map{|z| z["position"].map{|p| { xaxis: { from: p-0.5, to: p+0.5 }, color: z["color"] } } }.flatten.to_json %>,
      },
      yaxis: {
        min: 0,
        max: 101,
      },
      colors: [ "#edc240", "#ff0000" ],
    };
    var plot = graphDiv.plot([
    {
      data: <%= @groups[0].team_groups.select{|t|t.team_id == @team.id}.first.odds.map.with_index.map{|item,idx|[idx+1, item]} %>,
    },
    {
      data: [[<%=team_position%>, 0], [<%=team_position%>, 101]],
      lines: { show: true, lineWidth: "1", color: "rgba(255, 0, 0, 1.0)", dashed: true, },
      points: { show: false },
      bars: {show: false},
      highlightColor: "rgba(0,0,0,0)",
    },
    ], options).data("plot");

    graphDiv.bind("plothover", function (event, pos, item) {
      var x = Math.round(pos.x);
      if (x > 0 && x <= <%= @groups[0].team_groups.size %> &&
          pos.y > 0 && pos.y < 100) {
        var names = <%== (1..@groups[0].team_groups.size).map{|i|i.ordinalize}.to_json %>;
        var value = plot.getData()[0].data[x-1][1].toFixed(2);
        jQuery("#odds_tooltip").html(names[x-1] + ": " + value + "%")
          .css({top: pos.pageY+5, left: pos.pageX+5})
          .fadeIn(200);
      } else {
        jQuery("#odds_tooltip").hide();
      }
    });

    graphDiv.disableSelection();

    /*
    var markings = <%== (1..@groups[0].team_groups.size).to_a.map{|x|nil}.to_json %>;
    graphDiv.bind("plotclick", function (event, pos, item) {
      var x = Math.round(pos.x);
      if (x > 0 && x <= <%= @groups[0].team_groups.size %> &&
          pos.y > 0 && pos.y < 100) {
        var options = plot.getOptions();
        if (markings[x-1] == null) {
          markings[x-1] = { xaxis: { from: x - 0.5, to: x + 0.5 }, color: "#90EE90" };
        } else {
          markings[x-1] = null;
        }
        var total = 0;
        options.grid.markings = jQuery.grep(markings, function(n, i){
          if (n != null) {
            total += plot.getData()[0].data[i][1];
            return true;
          }
          return false;
        });
        console.log(total);
        plot.draw();
      }
    });
    */
  });

</script>

<table>
  <% @groups[0].zones.each do |z| %>
    <tr>
      <td><span style="color: <%= z["color"]%>">â–£</span> <%= z["name"] %>:</td>
      <td><%= sprintf("%02.2f", @groups[0].team_groups.select{|t|t.team_id == @team.id}.first.calculate_odds(z["position"])) %>%</td>
    </tr>
  <% end %>
</table>
<% end %>

<% if @played_games.size > 0 %>
<h3><%= s_("ChampionshipTeam|Played") %></h3>
<div class="game_score">
    <% @played_games.each do |game| %>
      <div class="<%= cycle "table_line_even", "table_line_odd" %> table_row">
        <div class="table_cell" style="width: 8%">
          <%= l game_date(game).to_date, :format => :day_month %>
        </div>
        <div class="table_cell" style="width: 92%">
          <%= render :partial => "game_list",
                     :locals => { :highlight_team => @team,
                                  :game => game,
                                  :show_country => @championship.show_country,
                                } %>
          <div class="clearer"></div>
        </div>
        <div class="clearer"></div>
      </div>
    <% end %>
</div>
<% end %>

<% if @scheduled_games.size > 0 %>
<h3><%= _("Scheduled") %></h3>
<div class="game_score">
    <% @scheduled_games.each do |game| %>
      <div class="<%= cycle "table_line_even", "table_line_odd" %> table_row">
        <div class="table_cell" style="width: 8%">
          <%= l game_date(game).to_date, :format => :day_month %>
        </div>
        <div class="table_cell" style="width: 92%">
          <%= render :partial => "game_list",
                     :locals => { :highlight_team => @team,
                                  :game => game } %>
          <div class="clearer"></div>
        </div>
        <div class="clearer"></div>
      </div>
    <% end %>
</div>
<% end %>

<h3><%= _("Players") %></h3>
<div class="yui-skin-sam">
<div id="pag" class="yui-dt-paginator"></div>
<div id="players">
  <table id="player_table">
  <thead>
    <tr>
      <th><%= _("Name") %></th>
      <th><%= _("Pos") %></th>
      <th><%= _("Goals") %></th>
      <th><%= _("Own Goals") %></th>
      <th><%= _("Penalties") %></th>
      <th></th>
    </tr>
  </thead>
    <% @players.each do |p| %>
      <tr>
        <td><%= link_to p[:player].name, :controller => :player, :action => :show, :id => p[:player] %></td>
        <td><%= p[:player].position %></td>
        <td><%= p[:goals] %></td>
        <td><%= p[:own_goals] %></td>
        <td><%= p[:penalties] %></td>
        <td><% if can? :manage, Game %>
          <%= link_to(_('Remove'), { :controller => :player,
                                     :action => :destroy_team,
                                     :id => p[:team_player] },
                                class: 'player-remove',
                                data: {
                                :remote => true,
                                :confirm => _('Are you sure?'),
                                :method => :post}) %>
        <% end %></td>
      </tr>
    <% end %>
  </table>
  <%= javascript_tag <<EOF
  document.on('ajax:failure', '.player-remove', function(event) {
    alert('#{_('Error removing')}');
  });
  document.on('ajax:success', '.player-remove', function(event) {
    YAHOO.example.EnhanceFromMarkup.myDataTable.deleteRow(event.target.parentNode.parentNode.id);
  });
EOF
%>
</div>
</div>

<%= javascript_tag "data = new Array();" %>
<%= javascript_tag <<EOF
  function plot_team_graph_data(request, idx) {
    var new_data = request.responseText.evalJSON();

    var current_data = data[idx];
    current_data["tooltips"][1] = new_data["tooltips"][0];
    current_data["urls"][1] = new_data["urls"][0];
    var has_other_team = current_data["data"].length > 4;

    for (var i = 0; i < 3; ++i) {
      var new_data_double_x = [];
      for (var j = 0; j < new_data["data"][i]["data"].length; ++j) {
        new_data_double_x.push(new_data["data"][i]["data"][j]);
        new_data_double_x[j][0] -= 1;
        new_data_double_x[j][0] *= 2;
        new_data_double_x[j][0] += 0.95;
      }
      new_data["data"][i]["data"] = new_data_double_x;
      new_data["data"][i]["xaxis"] = 2;
      new_data["data"][i]["bars"]["barWidth"] = 0.8;
    }
    var new_data_double_line_x = [];
    for (var j = 0; j < new_data["data"][3]["data"].length; ++j) {
      new_data_double_line_x.push(new_data["data"][3]["data"][j]);
      new_data_double_line_x[j][0] -= 1.0;
      new_data_double_line_x[j][0] *= 2.0;
      new_data_double_line_x[j][0] += 0.5;
    }
    new_data["data"][3]["data"] = new_data_double_line_x;
    new_data["data"][3]["xaxis"] = 2;

    if (has_other_team) {
      for (var i = 0; i < 4; ++i) {
        current_data["data"][4 + i] = new_data["data"][i];
      }
    } else {
      for (var i = 0; i < 3; ++i) {
        var current_data_double_x = [];
        for (var j = 0; j < current_data["data"][i]["data"].length; ++j) {
          current_data_double_x.push(current_data["data"][i]["data"][j]);
          current_data_double_x[j][0] -= 1;
          current_data_double_x[j][0] *= 2;
          current_data_double_x[j][0] += 0.05;
        }
        current_data["data"][i]["data"] = current_data_double_x;
        current_data["data"][i]["xaxis"] = 2;
        current_data["data"][i]["bars"]["barWidth"] = 0.8;
      }
      var current_data_double_line_x = [];
      for (var j = 0; j < current_data["data"][3]["data"].length; ++j) {
        current_data_double_line_x.push(current_data["data"][3]["data"][j]);
        current_data_double_line_x[j][0] -= 1.0;
        current_data_double_line_x[j][0] *= 2.0;
        current_data_double_line_x[j][0] += 0.5;
      }
      current_data["data"][3]["data"] = current_data_double_line_x;
      current_data["data"][3]["xaxis"] = 2;

      for (var i = 0; i < 4; ++i) {
        current_data["data"].push(new_data["data"][i]);
      }
    }

    current_data["data"][3]["label"] = '#{@team.name}';
    current_data["data"][7]["label"] = $('team_graph_select' + idx).options[$('team_graph_select' + idx).selectedIndex].text;
    jQuery("#placeholder" + idx).plot(current_data["data"], current_data["options"]);
  }

  function filter_other_team(idx) {
    var current_data = data[idx];
    var has_other_team = current_data["data"].length > 4;
    if (has_other_team) {
      for (var i = 0; i < 4; ++i) {
        var current_data_undo_double = [];
        for (var j = 0; j < current_data["data"][i]["data"].length; ++j) {
          current_data_undo_double.push(current_data["data"][i]["data"][j]);
          current_data_undo_double[j][0] = j + 1;
        }
        current_data["data"][i]["data"] = current_data_undo_double;
        current_data["data"][i]["xaxis"] = 1;
      }

      current_data["data"].pop();
      current_data["data"].pop();
      current_data["data"].pop();
      current_data["data"].pop();
      current_data["data"][3]["label"] = null;
      jQuery("#placeholder" + idx).plot(current_data["data"], current_data["options"]);
    }
  }
EOF
%>

<div id="graphs">
  <div id="tabs">
    <% @groups.each_with_index do |group, idx| %>
      <a href="javascript:load_graph_data(<%=idx%>)" class="<%= idx == 0 ? "active-tab" : "" %>"><%= group.phase.name %></a>
    <% end %>
  </div>
  <div id="panel" class='panel'>
    <% @groups.each_with_index do |group, idx| %>
      <%= javascript_tag "data[#{idx}] = #{@group_json[idx]};" %>
      <div id="panel<%=idx%>" class="<%= idx == 0 ? "active-tab-body" : "" %>">
      <div>
        <div id="placeholder<%=idx%>" style="width: 550px;
          height: 300px;
          font-size: 14px;
          line-height: 1.2em;"></div>
      </div>
      <div id="legend<%=idx%>"></div>
<script type="text/javascript">

  jQuery(function() {

    var graphDiv = jQuery("#placeholder<%=idx%>");
    var options = data[<%=idx%>]["options"];
    options["legend"] = {
        container: '#legend<%=idx%>',
        labelFormatter: function (label, series) {
          return '<span style="color: #ccc">' + label + '</span>';
        },
    };
    options["yaxes"][0]["transform"] = function (v) { return -v; };
    options["yaxes"][0]["inverseTransform"] = function (v) { return -v; };
    options["xaxes"][1]["ticks"] = function (axis) {
      var res = [];
      for (var i = 0.5; i < axis.max; i += 2) {
        res.push([i,""]);
      }
      return res;
    };

    graphDiv.plot(data[<%=idx%>].data, options);

    jQuery("<div id='tooltip'></div>").css({
      position: "absolute",
      display: "none",
      border: "1px solid #fdd",
      padding: "2px",
      "background-color": "#fee",
      opacity: 0.80,
    }).appendTo("body");

    graphDiv.bind("plothover", function (event, pos, item) {
      if (item) {
        var x = item.datapoint[0].toFixed(2);
        var y = item.datapoint[1].toFixed(2);

        jQuery('#placeholder<%=idx%>').css('cursor', 'pointer');
        jQuery("#tooltip").html(data[<%=idx%>]["tooltips"][Math.floor(item.seriesIndex/4)][item.dataIndex])
            .css({top: pos.pageY+5, left: pos.pageX+5})
            .fadeIn(200);
      } else {
        jQuery('#placeholder<%=idx%>').css('cursor', 'default');
        jQuery("#tooltip").hide();
      }
    });

    graphDiv.bind("plotclick", function (event, pos, item) {
      if (item) {
      window.location.href = data[<%=idx%>]["urls"][Math.floor(item.seriesIndex/4)][item.dataIndex];
      }
    });
    $('panel<%=idx%>').addClassName('select-div');
  });

  </script>

      <div id="spinner<%=idx%>" style="min-width: 30px; min-height: 30px; float: right;">&nbsp;</div>
      <%= _("Compare with other team:") %> <select id='team_graph_select<%=idx%>'>
        <option value="">-</option>
        <%= options_from_collection_for_select (group.teams - [@team]).sort{|a,b| a.name<=>b.name}, "id", "name" %>
      </select>
      </div>

      <%= observe_field "team_graph_select#{idx}",
                        :function => remote_function(
                                       :url => { :action => :team_json,
                                                 :id => @championship,
                                                 :phase => group.phase },
                                       :with => "'team=' + value",
                                       :method => :get,
                                       :before => "if (!value) { filter_other_team(#{idx}); return true; } $('spinner#{idx}').setStyle({backgroundImage: 'url(#{image_url "spinner.gif"})'});",
                                       :failure => "alert('#{_("Cant download data for team!")}');",
                                       :success => "plot_team_graph_data(request, #{idx})",
                                       :complete => "$('spinner#{idx}').setStyle({backgroundImage: ''})"
                                     ) %>
    <% end %>
  </div>
</div>

<% content_for :sidebar do %>
  <%= render :partial => "nav_side" %>

  <div class='team_table'>
    <% @groups.each do |group| %>
      <h2><%= group.phase.name %></h2>
      <%= render :partial => "table",
                 :locals => { :group => group,
                              :link_to_group => true,
                              :omit_columns => { :D => true,
                                                 :L => true,
                                                 :GF => true,
                                                 :GA => true,
                                                 :odds => true },
                              :omit_logo => true,
                              :omit_popup => true,
                              :omit_comments => true } %>
    <% end %>
  </div>
<% end %>

<!-- Load the YUI Loader script: -->
<script src="http://yui.yahooapis.com/2.5.2/build/yuiloader/yuiloader-beta-min.js"></script>

<% N_("No records found.") %>

<%= javascript_tag <<EOF
function load_graph_data(index) {
  tabs = $A($('tabs').getElementsByTagName('a'));
  divs = $A($('panel').getElementsByClassName('select-div'));
  for (i = 0; i < tabs.length; ++i) {
    if (i == index) {
      tabs[i].addClassName('active-tab');
      divs[i].addClassName('active-tab-body');
    } else {
      tabs[i].removeClassName('active-tab');
      divs[i].removeClassName('active-tab-body');
    }
  }
}

// Instantiate and configure Loader:
var loader = new YAHOO.util.YUILoader({

    // Identify the components you want to load.  Loader will automatically identify
    // any additional dependencies required for the specified components.
    require: ["datatable"],

    // The function to call when all script/css resources have been loaded
    onSuccess: function() {
        YAHOO.example.EnhanceFromMarkup = new function() {
            var myColumnDefs = [
                {key:"name",label:"#{_("Name")}",sortable:true},
                {key:"pos",label:"#{_("Pos")}", sortable:true},
                {key:"goals",label:"#{_("Goals")}",formatter:YAHOO.widget.DataTable.formatNumber,sortable:true, sortOptions:{defaultDir:YAHOO.widget.DataTable.CLASS_DESC}},
                {key:"own",label:"#{_("Own Goals")}",formatter:YAHOO.widget.DataTable.formatNumber,sortable:true, sortOptions:{defaultDir:YAHOO.widget.DataTable.CLASS_DESC}},
                {key:"penalties",label:"#{_("Penalties")}",formatter:YAHOO.widget.DataTable.formatNumber,sortable:true, sortOptions:{defaultDir:YAHOO.widget.DataTable.CLASS_DESC}},
                {key:"remove",label:"",sortable:false},
            ];

            this.parseStringFromLink = function(sString) {
              // Remove the link tag
              var name = sString.replace(/<.*?>/g, "");
              sortSpan = '<span style="display: none">' + name + '</span>';
              return sortSpan + sString;
            };

            this.myDataSource = new YAHOO.util.DataSource(YAHOO.util.Dom.get("player_table"));
            this.myDataSource.responseType = YAHOO.util.DataSource.TYPE_HTMLTABLE;
            this.myDataSource.responseSchema = {
                fields: [{key:"name", parser:this.parseStringFromLink},
                        {key:"pos"},
                        {key:"goals", parser:YAHOO.util.DataSource.parseNumber},
                        {key:"own", parser:YAHOO.util.DataSource.parseNumber},
                        {key:"penalties", parser:YAHOO.util.DataSource.parseNumber},
                        {key:"remove"},
                ]
            };

            var config = {
              paginator: new YAHOO.widget.Paginator({
                rowsPerPage: 10,
                template: '{PreviousPageLink} {NextPageLink}',
                containers: 'pag',
                previousPageLinkLabel: '#{_("&laquo; Previous")}',
                nextPageLinkLabel: '#{_("Next &raquo;")}',
                alwaysVisible: false
              }),
              sortedBy:{ key:"name", dir:"asc" }
            };
            YAHOO.widget.DataTable.MSG_EMPTY = '#{_("No records found.")}';
            this.myDataTable = new YAHOO.widget.DataTable("players", myColumnDefs, this.myDataSource, config);
        };
    }
});

// Load the files using the insert() method. The insert method takes an optional
// configuration object, and in this case we have configured everything in
// the constructor, so we don't need to pass anything to insert().
loader.insert();

EOF
%>
