<% content_for :title do %>
  <%= @championship.full_name %> - <%= @team.name %>
<% end %>
<% content_for :main_title do %>
  <%= @championship.full_name %>
<% end %>

<select id='team_select'>
  <%= options_from_collection_for_select @teams, "to_param", "name", @team.to_param %>
</select>

<% team_url = url_for(:controller => :championship, :action => :team, :id => @championship, :team => "") %>
<%= observe_field 'team_select', :function => "document.location = '#{team_url}' + value" %>

<h2><%= image_tag @team.logo.url(:medium), size: @team.logo.styles[:medium].geometry %>
  <%= link_to add_wbr_to_string(@team.name), :controller => :team, :action => :show, :id => @team %>
</h2>

<% if @played_games.size > 0 %>
<h3><%= s_("ChampionshipTeam|Played") %></h3>
<div class="game_score">
    <% @played_games.each do |game| %>
      <div class="<%= cycle "table_line_even", "table_line_odd" %> table_row">
        <div class="table_cell" style="width: 8%">
          <%= l game.date, :format => :day_month %>
        </div>
        <div class="table_cell" style="width: 92%">
          <%= render :partial => "game_list",
                     :locals => { :highlight_team => @team,
                                  :game => game,
                                  :show_country => @championship.show_country,
                                } %>
          <div class="clearer"></div>
        </div>
        <div class="clearer"></div>
      </div>
    <% end %>
</div>
<% end %>

<% if @scheduled_games.size > 0 %>
<h3><%= _("Scheduled") %></h3>
<div class="game_score">
    <% @scheduled_games.each do |game| %>
      <div class="<%= cycle "table_line_even", "table_line_odd" %> table_row">
        <div class="table_cell" style="width: 8%">
          <%= l game.date, :format => :day_month %>
        </div>
        <div class="table_cell" style="width: 92%">
          <%= render :partial => "game_list",
                     :locals => { :highlight_team => @team,
                                  :game => game } %>
          <div class="clearer"></div>
        </div>
        <div class="clearer"></div>
      </div>
    <% end %>
</div>
<% end %>

<h3><%= _("Players") %></h3>
<div class="yui-skin-sam">
<div id="pag" class="yui-dt-paginator"></div>
<div id="players">
  <table id="player_table">
  <thead>
    <tr>
      <th><%= _("Name") %></th>
      <th><%= _("Pos") %></th>
      <th><%= _("Goals") %></th>
      <th><%= _("Own Goals") %></th>
      <th><%= _("Penalties") %></th>
      <th></th>
    </tr>
  </thead>
    <% @players.each do |p| %>
      <tr>
        <td><%= link_to p[:player].name, :controller => :player, :action => :show, :id => p[:player] %></td>
        <td><%= p[:player].position %></td>
        <td><%= p[:goals] %></td>
        <td><%= p[:own_goals] %></td>
        <td><%= p[:penalties] %></td>
        <td><% if can? :manage, Game %>
          <%= link_to(_('Remove'), { :controller => :player,
                                     :action => :destroy_team,
                                     :id => p[:team_player] },
                                class: 'player-remove',
                                data: {
                                :remote => true,
                                :confirm => _('Are you sure?'),
                                :method => :post}) %>
        <% end %></td>
      </tr>
    <% end %>
  </table>
  <%= javascript_tag <<EOF
  document.on('ajax:failure', '.player-remove', function(event) {
    alert('#{_('Error removing')}');
  });
  document.on('ajax:success', '.player-remove', function(event) {
    YAHOO.example.EnhanceFromMarkup.myDataTable.deleteRow(event.target.parentNode.parentNode.id);
  });
EOF
%>
</div>
</div>

<%= javascript_tag "data = new Array();" %>
<%= javascript_tag "function load_graph_data0() { return Object.toJSON(data[0]); }" %>
<%= javascript_tag <<EOF
  function plot_team_graph_data(request, idx) {
    var new_data = request.responseText.evalJSON();
    var new_bar = new_data["elements"][2];
    var new_line = new_data["elements"][3];
    new_line["colour"] = "#006600";

    var current_data = data[idx];
    var has_other_team = current_data["elements"][3].type == "bar_glass";
    if (has_other_team) {
      current_data["elements"][3] = new_bar;
      current_data["elements"][5] = new_line;
    } else {
      current_data["elements"].splice(3, 0, new_bar);
      current_data["elements"].push(new_line);
    }

    current_data["elements"][4].text = '#{@team.name}';
    current_data["elements"][5].text = $('team_graph_select' + idx).options[$('team_graph_select' + idx).selectedIndex].text;
    findSWF("campaign_graph").load(Object.toJSON(current_data));
  }
  function filter_other_team(idx) {
    var current_data = data[idx];
    var has_other_team = current_data["elements"][3].type == "bar_glass";
    if (has_other_team) {
      current_data["elements"][4].text = null;
      current_data["elements"].splice(5, 1);
      current_data["elements"].splice(3, 1);
      findSWF("campaign_graph").load(Object.toJSON(current_data));
    }
  }
EOF
%>

<%= google_swfobject %>

<div id="graphs">
  <div id="tabs">
    <% @groups.each_with_index do |group, idx| %>
      <a href="javascript:load_graph_data(<%=idx%>)" class="<%= idx == 0 ? "active-tab" : "" %>"><%= group.phase.name %></a>
    <% end %>
  </div>
  <div id="panel" class='panel'>
    <%= @graph %>
    <% @groups.each_with_index do |group, idx| %>
      <%= javascript_tag "data[#{idx}] = #{@group_json[idx]};" %>
      <div id="panel<%=idx%>" class="select-div <%= idx == 0 ? "active-tab-body" : "" %>">
      <div id="spinner<%=idx%>" style="min-width: 30px; min-height: 30px; float: right;">&nbsp;</div>
      <%= _("Compare with other team:") %> <select id='team_graph_select<%=idx%>'>
        <option value="">-</option>
        <%= options_from_collection_for_select (group.teams - [@team]).sort{|a,b| a.name<=>b.name}, "id", "name" %>
      </select>
      </div>

      <%= observe_field "team_graph_select#{idx}",
                        :function => remote_function(
                                       :url => { :action => :team_json,
                                                 :id => @championship,
                                                 :phase => group.phase },
                                       :with => "'team=' + value",
                                       :method => :get,
                                       :before => "if (!value) { filter_other_team(#{idx}); return true; } $('spinner#{idx}').setStyle({backgroundImage: 'url(#{image_url "spinner.gif"})'});",
                                       :failure => "alert('#{_("Cant download data for team!")}');",
                                       :success => "plot_team_graph_data(request, #{idx})",
                                       :complete => "$('spinner#{idx}').setStyle({backgroundImage: ''})"
                                     ) %>
    <% end %>
  </div>
</div>

<% content_for :sidebar do %>
  <%= render :partial => "nav_side" %>

  <div class='team_table'>
    <% @groups.each do |group| %>
      <h2><%= group.phase.name %></h2>
      <%= render :partial => "table",
                 :locals => { :group => group,
                              :link_to_group => true,
                              :omit_columns => { :D => true,
                                                 :L => true,
                                                 :GF => true,
                                                 :GA => true,
                                                 :OP => true,
                                                 :PP => true,
                                                 :RP => true },
                              :omit_logo => true,
                              :omit_popup => true,
                              :omit_comments => true } %>
    <% end %>
  </div>
<% end %>

<!-- Load the YUI Loader script: -->
<script src="http://yui.yahooapis.com/2.5.2/build/yuiloader/yuiloader-beta-min.js"></script>

<% N_("No records found.") %>

<%= javascript_tag <<EOF
function findSWF(movieName) {
  if (navigator.appName.indexOf("Microsoft")!= -1) {
    return window[movieName];
  } else {
    return document[movieName];
  }
}

function load_graph_data(index) {
  tabs = $A($('tabs').getElementsByTagName('a'));
  divs = $A($('panel').getElementsByClassName('select-div'));
  for (i = 0; i < tabs.length; ++i) {
    if (i == index) {
      tabs[i].addClassName('active-tab');
      divs[i].addClassName('active-tab-body');
    } else {
      tabs[i].removeClassName('active-tab');
      divs[i].removeClassName('active-tab-body');
    }
  }
  findSWF("campaign_graph").load(Object.toJSON(data[index]));
}

// Instantiate and configure Loader:
var loader = new YAHOO.util.YUILoader({

    // Identify the components you want to load.  Loader will automatically identify
    // any additional dependencies required for the specified components.
    require: ["datatable"],

    // The function to call when all script/css resources have been loaded
    onSuccess: function() {
        YAHOO.example.EnhanceFromMarkup = new function() {
            var myColumnDefs = [
                {key:"name",label:"#{_("Name")}",sortable:true},
                {key:"pos",label:"#{_("Pos")}", sortable:true},
                {key:"goals",label:"#{_("Goals")}",formatter:YAHOO.widget.DataTable.formatNumber,sortable:true, sortOptions:{defaultDir:YAHOO.widget.DataTable.CLASS_DESC}},
                {key:"own",label:"#{_("Own Goals")}",formatter:YAHOO.widget.DataTable.formatNumber,sortable:true, sortOptions:{defaultDir:YAHOO.widget.DataTable.CLASS_DESC}},
                {key:"penalties",label:"#{_("Penalties")}",formatter:YAHOO.widget.DataTable.formatNumber,sortable:true, sortOptions:{defaultDir:YAHOO.widget.DataTable.CLASS_DESC}},
                {key:"remove",label:"",sortable:false},
            ];

            this.parseStringFromLink = function(sString) {
              // Remove the link tag
              var name = sString.replace(/<.*?>/g, "");
              sortSpan = '<span style="display: none">' + name + '</span>';
              return sortSpan + sString;
            };

            this.myDataSource = new YAHOO.util.DataSource(YAHOO.util.Dom.get("player_table"));
            this.myDataSource.responseType = YAHOO.util.DataSource.TYPE_HTMLTABLE;
            this.myDataSource.responseSchema = {
                fields: [{key:"name", parser:this.parseStringFromLink},
                        {key:"pos"},
                        {key:"goals", parser:YAHOO.util.DataSource.parseNumber},
                        {key:"own", parser:YAHOO.util.DataSource.parseNumber},
                        {key:"penalties", parser:YAHOO.util.DataSource.parseNumber},
                        {key:"remove"},
                ]
            };

            var config = {
              paginator: new YAHOO.widget.Paginator({
                rowsPerPage: 10,
                template: '{PreviousPageLink} {NextPageLink}',
                containers: 'pag',
                previousPageLinkLabel: '#{_("&laquo; Previous")}',
                nextPageLinkLabel: '#{_("Next &raquo;")}',
                alwaysVisible: false
              }),
              sortedBy:{ key:"name", dir:"asc" }
            };
            YAHOO.widget.DataTable.MSG_EMPTY = '#{_("No records found.")}';
            this.myDataTable = new YAHOO.widget.DataTable("players", myColumnDefs, this.myDataSource, config);
        };
    }
});

// Load the files using the insert() method. The insert method takes an optional
// configuration object, and in this case we have configured everything in
// the constructor, so we don't need to pass anything to insert().
loader.insert();

EOF
%>
