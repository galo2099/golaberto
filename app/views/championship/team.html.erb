<% content_for :title do %>
  <%= @championship.full_name %> - <%= @team.name %>
<% end %>
<% content_for :main_title do %>
  <%= @championship.full_name %>
<% end %>

<%= javascript_include_flot %>
<select id='team_select'>
  <%= options_from_collection_for_select @teams, "to_param", "name", @team.to_param %>
</select>

<% team_url = url_for(:controller => :championship, :action => :team, :id => @championship, :team => "") %>
<%= observe_field 'team_select', :function => "document.location = '#{team_url}' + value" %>

<h2><%= image_tag @team.logo.url(:medium), size: @team.logo.styles[:medium].geometry %>
  <%= link_to add_wbr_to_string(@team.name), :controller => :team, :action => :show, :id => @team %>
</h2>

<% if @groups[0].team_groups.select{|t|t.team_id == @team.id}.first.odds and @groups[0].phase.games.where(played: false).size > 0 then %>
<div id="odds" style="width: 550px;
          height: 200px;
          font-size: 14px;
          line-height: 1.2em;">
</div>

<% team_position = @groups[0].team_table.find_index{|t,s|t.team_id == @team.id} + 1 %>

<script type="text/javascript">
$(function() {
  $("<div id='odds_tooltip'></div>").css({
    position: "absolute",
    display: "none",
    border: "1px solid #fdd",
    padding: "2px",
    "background-color": "#fee",
    opacity: 0.80,
    zIndex: 0,
  }).appendTo("body");
  var div_selection = $("<div id='odds_selection'></div>").css({
    position: "absolute",
    display: "none",
    border: "1px solid #fdd",
    padding: "2px",
    "background-color": "#fee",
    opacity: 0.80,
    zIndex: 0,
  })

  var graphDiv = $("#odds");
  var options = {
    selection: {
      mode: "x"
    },
    series: {
      bars: {
        show: true,
        barWidth: 0.7,
        align: "center",
        fillColor: "rgba(255, 255, 255, 0.7)",
      },
    },
    xaxis: {
      min: 0.5,
      max: <%= @groups[0].team_groups.size + 0.5 %>,
      ticks: <%= (1..@groups[0].team_groups.size).to_a.map{|x|[x, x.to_s]}.to_json.html_safe %>,
      showTicks: false,
      autoScale: false,
    },
    grid: {
      hoverable: true,
      clickable: true,
<%
  # --- Part 0: Initial Zone Processing (add _original_idx for stable sorting) ---
  initial_zones_with_idx = []
  if @groups[0]&.zones.is_a?(Array)
    @groups[0].zones.each_with_index do |z, idx|
      if z.is_a?(Hash) && z["position"].is_a?(Array) && z["color"].present? && z["position"].all?{|pos| pos.is_a?(Integer)}
        # Ensure positions are integers for '&' operator
        initial_zones_with_idx << z.merge('_original_idx' => idx)
      end
    end
  end

  # --- Part 1: Zone Grouping (Connected Components) ---
  zone_components = []
  visited_indices_for_components = Set.new # Uses index from initial_zones_with_idx

  initial_zones_with_idx.each_with_index do |zone_i_obj, i|
    if visited_indices_for_components.include?(i)
      next
    end

    current_component_zones = []
    q = [zone_i_obj] # Queue for BFS-like traversal
    visited_indices_for_components.add(i)

    head = 0
    while head < q.size # Manual queue for Ruby array
      current_member = q[head]
      head += 1
      
      current_component_zones << current_member

      initial_zones_with_idx.each_with_index do |zone_j_obj, j|
        if !visited_indices_for_components.include?(j)
          # Check for rank overlap: (array1 & array2).any?
          if !(current_member["position"] & zone_j_obj["position"]).empty?
            visited_indices_for_components.add(j)
            q << zone_j_obj
          end
        end
      end
    end
    # Sort zones within this discovered component by their original definition order
    current_component_zones.sort_by! { |z| z['_original_idx'] }
    zone_components << current_component_zones
  end

  # Sort the components themselves by the original index of their first zone
  # This ensures a stable vertical stacking order for the groups
  zone_components.sort_by! { |component| component.first['_original_idx'] }

  # --- Part 2: Vertical Space Allocation & Marking Generation ---
  num_overall_groups = zone_components.size
  num_ranks = @groups[0]&.team_groups&.size || 0
  flot_markings = []

  if num_overall_groups > 0 && num_ranks > 0
    graph_max_y = 101.0

    zone_components.each_with_index do |component_content, group_idx|
      num_zones_in_this_component = component_content.size
      if num_zones_in_this_component == 0
        next # Should ideally not happen if components are formed correctly
      end
      
      # Height for sub-lanes within this specific group
      sub_lane_height = graph_max_y / num_zones_in_this_component 

      (1..num_ranks).each do |p_rank| # For each rank column
        # Zones within component_content are already sorted by _original_idx
        component_content.each_with_index do |zone_k_in_component, k_idx_in_component|
          
          # Y-coordinates for this specific zone's sub-lane within its group's allocated space
          y_sub_lane_from = k_idx_in_component * sub_lane_height
          y_sub_lane_to = (k_idx_in_component + 1) * sub_lane_height

          # Check if the current rank (p_rank) is part of this zone's positions
          if zone_k_in_component["position"].include?(p_rank)
            flot_markings << {
              xaxis: { from: p_rank - 0.5, to: p_rank + 0.5 },
              yaxis: { from: y_sub_lane_from, to: y_sub_lane_to },
              color: zone_k_in_component["color"]
            }
          end
        end
      end
    end
  end
%>
      markings: <%== flot_markings.to_json.html_safe %>,
    },
    yaxis: {
      min: 0,
      max: 101,
      autoScale: false,
      showTicks: false,
    },
    colors: [ "#edc240", "#ff0000" ],
  };
  var plot = graphDiv.plot([
  {
    data: <%= @groups[0].team_groups.select{|t|t.team_id == @team.id}.first.odds.map.with_index.map{|item,idx|[idx+1, item]} %>,
  },
  {
    data: [[<%=team_position%>, 0], [<%=team_position%>, 101]],
    lines: { show: true, lineWidth: "1", color: "rgba(255, 0, 0, 1.0)", dashed: true, },
    points: { show: false },
    bars: {show: false},
    highlightColor: "rgba(0,0,0,0)",
  },
  ], options).data("plot");

  graphDiv.append(div_selection);

  graphDiv.bind("plothover", function(event, pos, item) {
    var x = Math.round(pos.x);
    if (x > 0 && x <= <%= @groups[0].team_groups.size %> &&
        pos.y > 0 && pos.y < 100) {
      var names = <%== (1..@groups[0].team_groups.size).map{|i|i.ordinalize}.to_json %>;
      var value = plot.getData()[0].data[x-1][1].toLocaleString("<%= I18n.locale %>",  { minimumFractionDigits: 2, maximumFractionDigits: 2, })
      $("#odds_tooltip").html(names[x-1] + ": " + value + "%")
        .css({top: pos.pageY+5, left: pos.pageX+5})
        .fadeIn(200);
    } else {
      $("#odds_tooltip").hide();
    }
  });

  const roundToClosestFive = (num) => {
    let lower = Math.floor(num / 10) * 10;
    let upper = Math.ceil(num / 10) * 10;
    let lowerWithFive = lower + 5;
    let upperWithFive = upper - 5;

    // Determine which is closer to the original number
    if (num - lowerWithFive < upperWithFive - num) {
        return lowerWithFive;
    } else {
        return upperWithFive;
    }
  }

  graphDiv.on("plotselected", function (event, ranges) {
    var newFrom = roundToClosestFive(ranges.xaxis.from * 10) / 10;
    var newTo = roundToClosestFive(ranges.xaxis.to * 10) / 10;
    if (newFrom != ranges.xaxis.from || newTo != ranges.xaxis.to) {
      if (newFrom == newTo) {
        plot.clearSelection();
      } else {
        plot.setSelection({
          xaxis: {
            from: roundToClosestFive(ranges.xaxis.from * 10) / 10,
            to: roundToClosestFive(ranges.xaxis.to * 10) / 10,
          }
        });
      }
      return;
    }
    var fromIndex = Math.round(ranges.xaxis.from) - 1;
    var toIndex = Math.round(ranges.xaxis.to) - 1;
    var value = plot.getData()[0].data.slice(fromIndex, toIndex).reduce((a, b) => a + b[1], 0).toLocaleString("<%= I18n.locale %>", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    var posFrom = plot.pointOffset({x: ranges.xaxis.from, y: ranges.yaxis.to});
    var posTo = plot.pointOffset({x: ranges.xaxis.to, y: ranges.yaxis.to});
    var odds_selection = $("#odds_selection").html("<%= _("Selected:") %> " + value + "%");
    odds_selection.css({top: posFrom.top+5, left: (posFrom.left+posTo.left)/2 - odds_selection.width()/2})
      .fadeIn(200);
  });
  graphDiv.on("plotunselected", function (event) {
    $("#odds_selection").hide();
  });

  // Color the label in the xaxis for the current position in red
  $('div#odds .flot-x1-axis text').filter((i, x) => $(x).text() == "<%=team_position%>").css({
    "fill": "red",
  });
});

</script>

<table>
  <% @groups[0].zones.each do |z| %>
    <tr>
      <td><span style="color: <%= z["color"]%>">â–£</span> <%= z["name"] %>:</td>
      <td><%= number_to_percentage(@groups[0].team_groups.select{|t|t.team_id == @team.id}.first.calculate_odds(z["position"]).to_f, precision: 2) %></td>
    </tr>
  <% end %>
</table>
<% end %>

<% if @played_games.size > 0 %>
<h3><%= s_("ChampionshipTeam|Played") %></h3>
<div class="game_score">
    <% @played_games.each do |game| %>
      <div class="<%= cycle "table_line_even", "table_line_odd" %> table_row">
        <div class="table_cell" style="width: 8%">
          <%= l game_date(game).to_date, :format => :day_month %>
        </div>
        <div class="table_cell" style="width: 92%">
          <%= render :partial => "game_list",
                     :locals => { :highlight_team => @team,
                                  :game => game,
                                  :show_country => @championship.show_country,
                                } %>
          <div class="clearer"></div>
        </div>
        <div class="clearer"></div>
      </div>
    <% end %>
</div>
<% end %>

<% if @scheduled_games.size > 0 %>
<h3><%= _("Scheduled") %></h3>
<div class="game_score">
    <% @scheduled_games.each do |game| %>
      <div class="<%= cycle "table_line_even", "table_line_odd" %> table_row">
        <div class="table_cell" style="width: 8%">
          <%= l game_date(game).to_date, :format => :day_month %>
        </div>
        <div class="table_cell" style="width: 92%">
          <%= render :partial => "game_list",
                     :locals => { :highlight_team => @team,
                                  :game => game } %>
          <div class="clearer"></div>
        </div>
        <div class="clearer"></div>
      </div>
    <% end %>
</div>
<% end %>

<script>
  data = new Array();
  function plot_team_graph_data(new_data, idx) {
    var current_data = data[idx];
    current_data["tooltips"][1] = new_data["tooltips"][0];
    current_data["urls"][1] = new_data["urls"][0];
    var has_other_team = current_data["data"].length > 4;

    for (var i = 0; i < 3; ++i) {
      for (var j = 0; j < new_data["data"][i]["data"].length; j++) {
        new_data["data"][i]["data"][j][0] = new_data["data"][i]["data"][j][0]+0.02;
      }
      new_data["data"][i]["bars"]["align"] = "left";
      new_data["data"][i]["bars"]["barWidth"] = [0.38, true];
    }

    if (has_other_team) {
      for (var i = 0; i < 4; ++i) {
        current_data["data"][4 + i] = new_data["data"][i];
      }
    } else {
      for (var i = 0; i < 3; ++i) {
        for (var j = 0; j < current_data["data"][i]["data"].length; j++) {
          current_data["data"][i]["data"][j][0] = current_data["data"][i]["data"][j][0]-0.02;
        }
        current_data["data"][i]["bars"]["align"] = "right";
        current_data["data"][i]["bars"]["barWidth"] = [0.38, true];
      }
      for (var i = 0; i < 4; ++i) {
        current_data["data"].push(new_data["data"][i]);
      }
    }

    current_data["data"][3]["label"] = '<%= @team.name %>';
    current_data["data"][7]["label"] = $('#team_graph_select' + idx + ' option:selected').text();
    current_data["options"]["xaxes"][0].max = Math.max(current_data["data"][0].data.length, current_data["data"][4].data.length) + 0.5;

    $("#placeholder" + idx).plot(current_data["data"], current_data["options"]);
  }

  function filter_other_team(idx) {
    var current_data = data[idx];
    var has_other_team = current_data["data"].length > 4;
    if (has_other_team) {
      current_data["data"].pop();
      current_data["data"].pop();
      current_data["data"].pop();
      current_data["data"].pop();
      for (var i = 0; i < 3; ++i) {
        for (var j = 0; j < current_data["data"][i]["data"].length; j++) {
          current_data["data"][i]["data"][j][0] = current_data["data"][i]["data"][j][0]+0.02;
        }
        current_data["data"][i]["bars"]["align"] = "center";
        current_data["data"][i]["bars"]["barWidth"] = [0.8, true];
      }
      current_data["options"]["xaxes"][0].max = current_data["data"][0].data.length + 0.5;
      $("#placeholder" + idx).plot(current_data["data"], current_data["options"]);
    }
  }
</script>

<div id="graphs">
  <div id="tabs">
    <% @groups.each_with_index do |group, idx| %>
      <a href="javascript:load_graph_data(<%=idx%>)" class="<%= idx == 0 ? "active-tab" : "" %>"><%= group.phase.name %></a>
    <% end %>
  </div>
  <div id="panel" class='panel'>
    <% @groups.each_with_index do |group, idx| %>
      <%= javascript_tag "data[#{idx}] = #{@group_json[idx]};" %>
      <div id="panel<%=idx%>" class="<%= idx == 0 ? "active-tab-body" : "" %>">
      <div>
        <div id="placeholder<%=idx%>" style="width: 550px;
          height: 300px;
          font-size: 14px;
          line-height: 1.2em;"></div>
      </div>
      <div id="legend<%=idx%>"></div>
<style>
#legend {
  width: 100% !important;
}
.legendLayer .background {
  fill: #3e3e3e;
  stroke: rgba(0, 0, 0, 0);
}
.legendLayer text {
  fill: #ccc;
}
</style>
<script type="text/javascript">

  $(function() {
    var graphDiv = $("#placeholder<%=idx%>");
    var options = data[<%=idx%>]["options"];
    options["legend"] = {
        container: document.getElementById('legend<%=idx%>'),
        show: true,
    };
    options["yaxes"][0]["transform"] = function (v) { return -v; };
    options["yaxes"][0]["inverseTransform"] = function (v) { return -v; };
    options["xaxes"][1]["ticks"] = function (axis) {
      var res = [];
      for (var i = 0.5; i < axis.max; i += 2) {
        res.push([i,""]);
      }
      return res;
    };

    graphDiv.plot(data[<%=idx%>].data, options);

    $("<div id='tooltip'></div>").css({
      position: "absolute",
      display: "none",
      border: "1px solid #fdd",
      padding: "2px",
      "background-color": "#fee",
      opacity: 0.80,
    }).appendTo("body");

    graphDiv.bind("plothover", function (event, pos, item) {
      if (item) {
        $('#placeholder<%=idx%>').css('cursor', 'pointer');
        $("#tooltip").html(data[<%=idx%>]["tooltips"][Math.floor(item.seriesIndex/4)][item.dataIndex])
            .css({top: pos.pageY+5, left: pos.pageX+5})
            .fadeIn(200);
      } else {
        $('#placeholder<%=idx%>').css('cursor', 'default');
        $("#tooltip").hide();
      }
    });

    graphDiv.bind("plotclick", function (event, pos, item) {
      if (item) {
        window.location.href = data[<%=idx%>]["urls"][Math.floor(item.seriesIndex/4)][item.dataIndex];
      }
    });
    $('#panel<%=idx%>').addClass('select-div');
  });

  </script>

      <div id="spinner<%=idx%>" style="min-width: 30px; min-height: 30px; float: right;">&nbsp;</div>
      <%= _("Compare with other team:") %> <select id='team_graph_select<%=idx%>'>
        <option value="">-</option>
        <%= options_from_collection_for_select (group.teams - [@team]).sort{|a,b| a.name<=>b.name}, "id", "name" %>
      </select>
      </div>

      <%= observe_field "team_graph_select#{idx}",
                        :function => remote_function(
                                       :url => { :action => :team_json,
                                                 :id => @championship,
                                                 :phase => group.phase },
                                       :with => "'team=' + value",
                                       :method => :get,
                                       :before => "if (!value) { filter_other_team(#{idx}); return false; } $('#spinner#{idx}').css('background-image', 'url(#{image_url "spinner.gif"})');",
                                       :failure => "alert('#{_("Cant download data for team!")}');",
                                       :success => "plot_team_graph_data(response, #{idx})",
                                       :complete => "$('#spinner#{idx}').css('background-image', '')"
                                     ) %>
    <% end %>
  </div>
</div>

<% content_for :sidebar do %>
  <%= render :partial => "nav_side" %>

  <div class='team_table'>
    <% @groups.each do |group| %>
      <h2><%= group.phase.name %></h2>
      <%= render :partial => "table",
                 :locals => { :group => group,
                              :link_to_group => true,
                              :omit_columns => { :D => true,
                                                 :L => true,
                                                 :GF => true,
                                                 :GA => true,
                                                 :Form => true,
                                                 :odds => true },
                              :omit_logo => true,
                              :omit_popup => true,
                              :omit_comments => true } %>
    <% end %>
  </div>
<% end %>

<% N_("No records found.") %>

<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.13.1/fc-4.2.1/datatables.min.css"/>
<script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.13.1/fc-4.2.1/datatables.min.js"></script>
<h3><%= _("Players") %></h3>
<script>
function load_graph_data(index) {
  var tabs = $('#tabs a');
  var divs = $('#panel .select-div');

  tabs.removeClass('active-tab');
  divs.removeClass('active-tab-body');

  tabs.eq(index).addClass('active-tab');
  divs.eq(index).addClass('active-tab-body');
}
</script>
<style>
#odds .flot-x-axis, #odds .flot-y-axis {
  font-size: 12px;
  fill: rgb(84, 84, 84);
}
#panel .flot-x-axis, #panel .flot-y-axis {
  font-size: 12px;
  fill: rgb(255, 255, 255);
}
</style>
<%= render partial: "shared/player_stats_table", locals: {
  player_stats: @player_stats,
  options: { columns_to_show: [:name,:position, :minutes, :goals, :goals_per_90, :rating, :rating_per_90, :off_rating, :def_rating, :own_goals, :penalties, :appearances, :played, :substituted_in, :bench, :yellows, :reds] },
  datatable_options: { order: [[ 3, 'desc' ]] },
} %>
