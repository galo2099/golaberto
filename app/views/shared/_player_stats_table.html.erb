<%
text_columns = Set[:season, :team, :championship, :name, :position]
asc_columns = Set[:team, :championship, :name, :position]
default_options = {
  columns_to_show: [:name, :position, :minutes, :goals, :goals_per_90, :own_goals, :penalties, :appearances, :played, :substituted_in, :bench, :yellows, :reds]
}
options = default_options.merge(options || {})
text_columns_selected = options[:columns_to_show].to_set.intersection(text_columns).size
targets = options[:columns_to_show].each_with_index.map{|x,i| i unless asc_columns.include?(x) }.select{|x| not x.nil?}
text_targets = options[:columns_to_show].each_with_index.map{|x,i| i if text_columns.include?(x) }.select{|x| not x.nil?}
datatable_options = {
    language: { url: "https://cdn.datatables.net/plug-ins/1.13.1/i18n/#{I18n.locale}.json" },
    fixedColumns: true,
    searching: false,
    info: false,
    paging: false,
    scrollY: 400,
    scrollCollapse: true,
    scrollX: true,
    columnDefs: [
        {targets: targets, orderSequence: ["desc", "asc"]},
        {targets: text_targets, className: "textColumn"},
    ],
  }.merge(datatable_options || {})

columns_def = {
  season: {
    header: "<th>#{_("Season")}</th>",
    body: ->(p) { "<td data-order='#{p.latest.to_i}'>#{p.game.phase.championship.season}</td>" },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
  },
  team: {
    header: "<th>#{_("Team")}</th>",
    body: ->(p) { "<td>" +
      image_tag(p.team.small_country_logo, title: _(p.team.country), size: "15x15", alt: ".") +
      image_tag(p.team.logo.url(:thumb), size: p.team.logo.styles[:thumb].geometry, alt: ".") +
      link_to(add_wbr_to_string(p.team.name), action: :team, controller: :championship, id: p.game.phase.championship, team: p.team) +
      "</td>" },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
  },
  championship: {
    header: "<th>#{_("Championship")}</th>",
    body: ->(p) {
      champ = p.game.phase.championship
      "<td>" +
        image_tag(region_flag_url(champ.region, champ.region_name) , :title => _(champ.region_name), size: "15x15") +
        link_to(champ.full_name(false, false), {:controller => :championship, :action => :team, :id => champ, team: p.team}) +
        "</td>"
     },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
  },
  name: {
    header: "<th>#{_("Name")}</th>",
    body: ->(p) { "<td>" +
      image_tag(p.player.small_country_logo, title: _(p.player.country), size: "15x15", alt: ".") +
      link_to(p.player.name, :controller => :player, :action => :show, :id => p.player) +
      "</td>"
    },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
  },
  position: {
    header: "<th tile='#{_("Position")}'>#{s_("Position|P")}</th>",
    body: ->(p) { "<td>#{p.player.position}</td>" },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
  },
  goals: {
    header: "<th tile='#{_("Goals")}'>#{image_tag "goal.png"}</th>",
    body: ->(p) { "<td>#{p.goals}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.goals}.sum}</th>" },
  },
  goals_per_90: {
    header: "<th tile='#{_("Goals per 90 minutes")}'>#{image_tag "goal.png", size: "8x8"}<span style='font-size: xx-small'>/90</span></th>",
    body: ->(p) { "<td>#{number_with_precision(p.goals.to_f / (p.minutes.to_f.nonzero? || 1) * 90, precision: 2)}</td>" },
    footer: ->(stats, first) { "<th>#{number_with_precision(stats.map{|p|p.goals}.sum.to_f / (stats.map{|p|p.minutes}.sum.nonzero? || 1) * 90, precision: 2)}</th>" },
  },
  own_goals: {
    header: "<th tile='#{_("Own Goals")}'>#{s_("OwnGoals|O")}</th>",
    body: ->(p) { "<td>#{p.own_goals}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.own_goals}.sum}</th>" },
  },
  penalties: {
    header: "<th tile='#{_("Penalties")}'>#{s_("Penalties|P")}</th>",
    body: ->(p) { "<td>#{p.penalties}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.penalties}.sum}</th>" },
  },
  appearances: {
    header: "<th tile='#{_("Appearances")}'>#{s_("Appearances|A")}</th>",
    body: ->(p) { "<td>#{p.appearances}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.appearances}.sum}</th>" },
  },
  played: {
    header: "<th tile='#{_("Played")}'>#{s_("Played|P")}</th>",
    body: ->(p) { "<td>#{p.played}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.played}.sum}</th>" },
  },
  substituted_in: {
    header: "<th tile='#{_("Substituted In")}'>#{s_("Substituted In|S")}</th>",
    body: ->(p) { "<td>#{p.sub}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.sub}.sum}</th>" },
  },
  bench: {
    header: "<th tile='#{_("Bench")}'>#{s_("Bench|B")}</th>",
    body: ->(p) { "<td>#{p.bench}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.bench}.sum}</th>" },
  },
  yellows: {
    header: "<th tile='#{_("Yellows")}'>#{image_tag "yells.gif"}</th>",
    body: ->(p) { "<td>#{p.yellows}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.yellows}.sum}</th>" },
  },
  reds: {
    header: "<th tile='#{_("Reds")}'>#{image_tag "reds.gif"}</th>",
    body: ->(p) { "<td>#{p.reds}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.reds}.sum}</th>" },
  },
  minutes: {
    header: "<th tile='#{_("Minutes")}'>#{s_("Minutes|M")}</th>",
    body: ->(p) { "<td>#{p.minutes}</td>" },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.minutes}.sum}</th>" },
  },
}

%>

<style>
table.dataTable thead tr th.dtfc-fixed-left, table.dataTable tfoot tr th.dtfc-fixed-left {
  background-color: #E3EFCA;
}
table.dataTable tbody tr td.dtfc-fixed-left, table.dataTable thead tr th.dtfc-fixed-left {
  border-right: 1px solid rgba(0, 0, 0, 0.3);
}
table.dataTable tbody tr.even td.dtfc-fixed-left {
  background-color: #E3EFCA;
}
table.dataTable tbody tr.even {
  background-color: #E3EFCA;
}
table.dataTable tbody tr.even td.sorting_1 {
  background-color: #CEE3A3;
}
table.dataTable tbody tr.odd {
  background-color: #CEE3A3;
}
table.dataTable tbody tr.odd td.dtfc-fixed-left {
  background-color: #CEE3A3;
}

table.dataTable tbody tr.odd td.sorting_1 {
  background: #B9D77C;
}
div.dtfc-right-top-blocker {
  background-color: rgba(0, 0, 0, 0);
}
table.dataTable tfoot th {
  text-align: right;
}
#players_stats_table_div {
  overflow: auto;
}
td:nth-child(n+<%= text_columns_selected+1 %>), th:nth-child(n+<%= text_columns_selected+1 %>) {
  text-align: right;
}
table.dataTable td.textColumn {
  white-space: nowrap;
  max-width: 130px;
  overflow: hidden;
  text-overflow: ellipsis;
}
</style>
<div id="players_stats_table_div">
  <table id="player_stats_table" class="dataTable">
  <thead>
    <tr>
      <% options[:columns_to_show].each do |column| %>
        <%== columns_def[column][:header] %>
      <% end %>
    </tr>
  </thead>
    <% player_stats.each do |p| %>
      <tr>
      <% options[:columns_to_show].each do |column| %>
        <%== columns_def[column][:body].call(p) %>
      <% end %>
      </tr>
    <% end %>
    <tfoot><tr>
      <% first = true %>
      <% options[:columns_to_show].each do |column| %>
        <%== columns_def[column][:footer].call(@player_stats, first) %>
	<% first = false %>
      <% end %>
    </tr></tfoot>
  </table>
</div>

<script>
jQuery(document).ready(function ($) {
  $.fn.dataTable.ext.order.intl = function (locales, options) {
    if (window.Intl) {
      var collator = new Intl.Collator(locales, options);
      var types = $.fn.dataTable.ext.type;

      delete types.order['string-pre'];
      types.order['string-asc'] = collator.compare;
      types.order['string-desc'] = function (a, b) {
        return collator.compare(a, b) * -1;
      };
    }
  };

  $.fn.dataTable.ext.order.htmlIntl = function (locales, options) {
    if (window.Intl) {
      var collator = new Intl.Collator(locales, options);
      var types = $.fn.dataTable.ext.type;

      delete types.order['html-pre'];
      types.order['html-asc'] = function (a, b) {
        a = a.replace(/<.*?>/g, '');
        b = b.replace(/<.*?>/g, '');
        return collator.compare(a, b);
      };
      types.order['html-desc'] = function (a, b) {
        a = a.replace(/<.*?>/g, '');
        b = b.replace(/<.*?>/g, '');
        return collator.compare(a, b) * -1;
      };
    }
  };

  $.fn.dataTable.ext.order.intl(undefined , {sensitivity: 'base'});
  $.fn.dataTable.ext.order.htmlIntl(undefined , {sensitivity: 'base'});
  $('#player_stats_table').DataTable({
     ...<%== datatable_options.to_json %>,
   });
});
</script>
