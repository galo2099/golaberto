<%
text_columns = Set[:season, :team, :championship, :name, :position]
asc_columns = Set[:team, :championship, :name, :position]
default_options = {
  columns_to_show: [:name, :position, :minutes, :goals, :goals_per_90, :own_goals, :penalties, :appearances, :played, :substituted_in, :bench, :yellows, :reds],
  show_total: true,
}
options = default_options.merge(options || {})
id_suffix = id_suffix || ""
text_columns_selected = options[:columns_to_show].to_set.intersection(text_columns).size
targets = options[:columns_to_show].each_with_index.map{|x,i| i unless asc_columns.include?(x) }.select{|x| not x.nil?}
text_targets = options[:columns_to_show].each_with_index.map{|x,i| i if text_columns.include?(x) }.select{|x| not x.nil?}

columns_def = {
  season: {
    header: "<th>#{_("Season")}</th>",
    body: ->(p) { { order: p.latest.to_i, display: p.game.phase.championship.season } },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
    render: "(" + { display: "display", sort: "order" }.to_json + ")",
  },
  team: {
    header: "<th>#{_("Team")}</th>",
    body: ->(p) { p.id },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
    render: "render_team",
  },
  championship: {
    header: "<th>#{_("Championship")}</th>",
    body: ->(p) { p.id },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
    render: "render_championship",
  },
  name: {
    header: "<th>#{_("Name")}</th>",
    body: ->(p) { p.id },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
    render: "render_player",
  },
  position: {
    header: "<th title='#{_("Position")}'>#{s_("Position|P")}</th>",
    body: ->(p) { p.player.position },
    footer: ->(stats, first) { if first then "<th>#{_("Total")}</th>" else "<th></th>" end },
  },
  goals: {
    header: "<th title='#{_("Goals")}'>#{image_tag "goal.png"}</th>",
    body: ->(p) { p.goals },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.goals}.sum}</th>" },
  },
  goals_per_90: {
    header: "<th title='#{_("Goals per 90 minutes")}'>#{image_tag "goal.png", size: "8x8"}<span style='font-size: xx-small'>/90</span></th>",
    body: ->(p) { number_with_precision(p.goals.to_f / (p.minutes.to_f.nonzero? || 1) * 90, precision: 2) },
    footer: ->(stats, first) { "<th>#{number_with_precision(stats.map{|p|p.goals}.sum.to_f / (stats.map{|p|p.minutes}.sum.nonzero? || 1) * 90, precision: 2)}</th>" },
  },
  own_goals: {
    header: "<th title='#{_("Own Goals")}'>#{s_("OwnGoals|O")}</th>",
    body: ->(p) { p.own_goals },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.own_goals}.sum}</th>" },
  },
  penalties: {
    header: "<th title='#{_("Penalties")}'>#{s_("Penalties|P")}</th>",
    body: ->(p) { p.penalties },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.penalties}.sum}</th>" },
  },
  appearances: {
    header: "<th title='#{_("Appearances")}'>#{s_("Appearances|A")}</th>",
    body: ->(p) { p.appearances },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.appearances}.sum}</th>" },
  },
  played: {
    header: "<th title='#{_("Played")}'>#{s_("Played|P")}</th>",
    body: ->(p) { p.played },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.played}.sum}</th>" },
  },
  substituted_in: {
    header: "<th title='#{_("Substituted In")}'>#{s_("Substituted In|S")}</th>",
    body: ->(p) { p.sub },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.sub}.sum}</th>" },
  },
  bench: {
    header: "<th title='#{_("Bench")}'>#{s_("Bench|B")}</th>",
    body: ->(p) { p.bench },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.bench}.sum}</th>" },
  },
  yellows: {
    header: "<th title='#{_("Yellows")}'>#{image_tag "yells.gif"}</th>",
    body: ->(p) { p.yellows },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.yellows}.sum}</th>" },
  },
  reds: {
    header: "<th title='#{_("Reds")}'>#{image_tag "reds.gif"}</th>",
    body: ->(p) { p.reds },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.reds}.sum}</th>" },
  },
  minutes: {
    header: "<th title='#{_("Minutes")}'>#{s_("Minutes|M")}</th>",
    body: ->(p) { p.minutes },
    footer: ->(stats, first) { "<th>#{stats.map{|p|p.minutes}.sum}</th>" },
  },
  off_rating: {
    header: "<th title='#{_("Offensive Rating")}'>#{s_("Offensive Rating|O")}</th>",
    body: ->(p) { number_with_precision(p.off_rating, precision: 2) },
    footer: ->(stats, first) { "<th>#{number_with_precision(stats.map{|p|p.off_rating}.sum, precision: 2)}</th>" },
  },
  def_rating: {
    header: "<th title='#{_("Defensive Rating")}'>#{s_("Defensive Rating|D")}</th>",
    body: ->(p) { number_with_precision(p.def_rating, precision: 2) },
    footer: ->(stats, first) { "<th>#{number_with_precision(stats.map{|p|p.def_rating}.sum, precision: 2)}</th>" },
  },
  rating: {
    header: "<th title='#{_("Rating")}'>#{s_("Rating|R")}</th>",
    body: ->(p) { number_with_precision(p.off_rating + p.def_rating, precision: 2) },
    footer: ->(stats, first) { "<th>#{number_with_precision(stats.map{|p|p.off_rating + p.def_rating}.sum, precision: 2)}</th>" },
  },
  rating_per_90: {
    header: "<th title='#{_("Rating per 90 minutes")}'>#{s_("Rating|R/90")}</th>",
    body: ->(p) { number_with_precision((p.off_rating + p.def_rating).to_f / (p.minutes.to_f.nonzero? || 1) * 90, precision: 2) },
    footer: ->(stats, first) { "<th>#{number_with_precision(stats.map{|p|p.off_rating+p.def_rating}.sum.to_f / (stats.map{|p|p.minutes}.sum.nonzero? || 1) * 90, precision: 2)}</th>" },
  },
}

teams = {}
countries = {}
players = {}
championships = {}
pg = {}

player_stats.each do |p|
  champ = p.game.phase.championship
  championships[champ.id] = {
    name: champ.full_name(false, false),
    region: _(champ.region_name),
    region_flag: region_flag_url(champ.region, champ.region_name),
    param: champ.to_param,
  }
  teams[p.team_id] ||= {
    name: p.team.name,
    logo: p.team.logo.url(:thumb),
    param: p.team.to_param,
    country: p.team.country,
  }
  countries[p.team.country] ||= {
    name: _(p.team.country),
    logo: p.team.small_country_logo,
  }
  countries[p.player.country] ||= {
    name: _(p.player.country),
    logo: p.player.small_country_logo,
  }
  players[p.player_id] ||= {
    name: p.player.name,
    full_name: p.player.full_name,
    param: p.player.to_param,
    country: p.player.country,
  }
  pg[p.id] = {
    team: p.team_id,
    championship: champ.id,
    player: p.player_id,
  }
end


data = player_stats.map do |p|
  options[:columns_to_show].map do |column|
    columns_def[column][:body].call(p)
  end
end

text_targets_render = options[:columns_to_show].each_with_index.map do |x,i|
  { targets: i, render: columns_def[x][:render] } if columns_def[x][:render]
end.select{|x| not x.nil?}

datatable_options = {
  language: {
    url: "https://cdn.datatables.net/plug-ins/1.13.1/i18n/#{I18n.locale}.json",
    lengthMenu: _("_MENU_ records"),
   },
  fixedColumns: true,
  searching: false,
  info: false,
  paging: false,
  deferRender: true,
  scrollY: 400,
  scrollCollapse: true,
  scrollX: true,
  data: data,
  columnDefs: [
      {targets: targets, orderSequence: ["desc", "asc"]},
      {targets: text_targets, className: "textColumn"},
  ],
}.merge(datatable_options || {})
%>

<style>
table.dataTable thead tr th.dtfc-fixed-left, table.dataTable tfoot tr th.dtfc-fixed-left {
  background-color: #E3EFCA;
}
table.dataTable tbody tr td.dtfc-fixed-left, table.dataTable thead tr th.dtfc-fixed-left {
  border-right: 1px solid rgba(0, 0, 0, 0.3);
}
table.dataTable tbody tr.even td.dtfc-fixed-left {
  background-color: #E3EFCA;
}
table.dataTable tbody tr.even {
  background-color: #E3EFCA;
}
table.dataTable tbody tr.even td.sorting_1 {
  background-color: #CEE3A3;
}
table.dataTable tbody tr.odd {
  background-color: #CEE3A3;
}
table.dataTable tbody tr.odd td.dtfc-fixed-left {
  background-color: #CEE3A3;
}

table.dataTable tbody tr.odd td.sorting_1 {
  background: #B9D77C;
}
div.dtfc-right-top-blocker {
  background-color: rgba(0, 0, 0, 0);
}
table.dataTable tfoot th, table.dataTable thead th {
  text-align: right;
}
#players_stats_table_div<%= id_suffix %> {
  overflow: auto;
}
td:nth-child(n+<%= text_columns_selected+1 %>), th:nth-child(n+<%= text_columns_selected+1 %>) {
  text-align: right;
}
table.dataTable td.textColumn {
  white-space: nowrap;
  max-width: 130px;
  overflow: hidden;
  text-overflow: ellipsis;
}
</style>
<div id="players_stats_table_div<%= id_suffix %>">
  <table id="player_stats_table<%= id_suffix %>" class="dataTable">
  <thead>
    <tr>
      <% options[:columns_to_show].each do |column| %>
        <%== columns_def[column][:header] %>
      <% end %>
    </tr>
  </thead>
    <% if options[:show_total] %>
      <tfoot><tr>
        <% first = true %>
        <% options[:columns_to_show].each do |column| %>
          <%== columns_def[column][:footer].call(player_stats, first) %>
          <% first = false %>
        <% end %>
      </tr></tfoot>
    <% end %>
  </table>
</div>

<script>

var players = <%== Oj.dump(players, mode: :compat) %>;
var teams = <%== Oj.dump(teams, mode: :compat) %>;
var championships = <%== Oj.dump(championships, mode: :compat) %>;
var countries = <%== Oj.dump(countries, mode: :compat) %>;
var pg = <%== Oj.dump(pg, mode: :compat) %>;

function render_player(data, type, row) {
  var p = pg[data];
  var player = players[p.player];
  if ( type === 'display') {
    var team = teams[p.team];
    var country = countries[player.country];
    var champ = championships[p.championship];
    return '<img width="15" height="15" title="' + country.name + '" src="' + country.logo + '"> ' +
      '<a href="/championship/show/' + champ.param + '/team/' + team.param + '/player/' + player.param + '">' + player.name + '</a>';
  }
  return player.name + " " + player.full_name;
}

function render_championship(data, type, row) {
  var p = pg[data];
  var champ = championships[p.championship];
  if ( type === 'display') {
    var team = teams[p.team];
    var player = players[p.player];
    return '<img width="15" height="15" title="' + champ.region + '" src="' + champ.region_flag + '"> ' +
      '<a href="/championship/show/' + champ.param + '/team/' + team.param + '/player/' + player.param + '">' + champ.name + '</a>';
  }
  return champ.name;
}

function render_team(data, type, row) {
  var p = pg[data];
  var team = teams[p.team];
  if ( type === 'display') {
    var country = countries[team.country];
    var player = players[p.player];
    var champ = championships[p.championship];
    return '<img width="15" height="15" title="' + country.name + '" src="' + country.logo + '"> ' +
      '<img width="15" height="15" src="' + team.logo + '"> ' + '<a href="/championship/show/' + champ.param + '/team/' + team.param + '/player/' + player.param + '">' + team.name + '</a>';
  }
  return team.name;
}

jQuery(document).ready(function ($) {
  $.fn.dataTable.ext.order.intl = function (locales, options) {
    if (window.Intl) {
      var collator = new Intl.Collator(locales, options);
      var types = $.fn.dataTable.ext.type;

      delete types.order['string-pre'];
      types.order['string-asc'] = collator.compare;
      types.order['string-desc'] = function (a, b) {
        return collator.compare(a, b) * -1;
      };
    }
  };

  $.fn.dataTable.ext.order.htmlIntl = function (locales, options) {
    if (window.Intl) {
      var collator = new Intl.Collator(locales, options);
      var types = $.fn.dataTable.ext.type;

      delete types.order['html-pre'];
      types.order['html-asc'] = function (a, b) {
        a = a.replace(/<.*?>/g, '');
        b = b.replace(/<.*?>/g, '');
        return collator.compare(a, b);
      };
      types.order['html-desc'] = function (a, b) {
        a = a.replace(/<.*?>/g, '');
        b = b.replace(/<.*?>/g, '');
        return collator.compare(a, b) * -1;
      };
    }
  };

  $.fn.dataTable.ext.order.intl(undefined , {sensitivity: 'base'});
  $.fn.dataTable.ext.order.htmlIntl(undefined , {sensitivity: 'base'});
  var options = <%== Oj.dump(datatable_options, mode: :compat) %>;
  var text_targets_render = <%== Oj.dump(text_targets_render, mode: :compat) %>;
  options.columnDefs.push(...text_targets_render.map(function(x) {
    x.render = eval(x.render);
    return x;
  }));
  var tableEl = $('#player_stats_table<%= id_suffix %>');
  var table = tableEl.DataTable(options);
  $('table.dataTable').on('mouseenter', 'tr td', function(e) {
    var item = e.target;
    if (item.offsetWidth < item.scrollWidth && !$(item).attr('title')){
      $(item).attr('title', item.innerText);
    }
  });

  tableEl.on('init.dt', function() {
        // Now that the DataTable is initialized, the plugin has finished making DOM
        // modifications. Let's search for their INPUT and add our own before it.
        var tableId = tableEl.attr('id');
        var searchInput = tableEl
              .parents('.dataTables_wrapper')
              .find('input[type=search]');
        var ourInput = $(document.createElement('input'))
              .attr({
                id: 'minute_filter',
                type: 'number',
                value: 0,
                min: 0,
                'class': 'form-control form-control-sm',
                style: 'width: 4em',
                'aria-controls': tableId,
              })

        // Add ourInput to the page
        $(document.createElement('div'))
          .addClass('dataTables_filter')
          .css('float', 'left')
          .css('margin-left', '10%')
          .append(
            $(document.createElement('label'))
              .addClass('mdl-textfield mdl-js-textfield mdl-textfield--floating-label')
              .append(
                $(document.createElement('span'))
                  .addClass('mdl-textfield__label')
                  .text('<%= _('Minutes') %>'))
              .append(
                ourInput.addClass('mdl-textfield__input')))
          .insertBefore(searchInput.parent().parent());

        function findSiblingNonelements(element) {
          let children = element.parentNode.childNodes,
              j = children.length,
              siblings = [],
              el;
          while (el = children[--j]) {
            if (el.nodeType !== 1) {
              siblings.push(el);
            }
          }
          return siblings;
        }

	// Event listener to the two range filtering inputs to redraw on input
        $('#minute_filter').on('input', function () {
          table.draw();
        });
  });

  $.fn.DataTable.ext.type.search.string = function (s) {
    if (s) {
      return s.normalize("NFD").replace(/\p{Diacritic}/gu, "");
    } else {
      return "";
    }
  };

  /* Custom filtering function which will search data in column four between two values */
  $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
    var min = parseInt($('#minute_filter').val(), 10);
    var minutes = parseFloat(data[3]) || 0; // use data for the age column

    if (isNaN(min) || min <= minutes) {
        return true;
    }
    return false;
  });
});
</script>
