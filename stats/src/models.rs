// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]
use crate::schema::*;
use diesel::{deserialize, Associations, FromSqlRow, Identifiable, Queryable, Selectable};

use chrono::NaiveDate;
use chrono::NaiveDateTime;
use diesel::deserialize::FromSql;
use diesel::mysql::Mysql;
use diesel::sql_types::Date;

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = categories)]
pub struct Category {
    pub id: i32,
    pub name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Championship {
    pub id: i32,
    pub name: String,
    pub begin: NaiveDate,
    pub end: NaiveDate,
    pub point_win: i32,
    pub point_draw: i32,
    pub point_loss: i32,
    pub category_id: i32,
    pub show_country: bool,
    // pub created_at: MysqlNaiveDateTime,
    // pub updated_at: MysqlNaiveDateTime,
    pub region: i32,
    pub region_name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Comment {
    pub id: i32,
    pub title: Option<String>,
    pub comment: Option<String>,
    pub created_at: NaiveDateTime,
    pub commentable_id: i32,
    pub commentable_type: String,
    pub user_id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct GameVersion {
    pub id: i32,
    pub game_id: Option<i32>,
    pub version: Option<i32>,
    pub home_id: Option<i32>,
    pub away_id: Option<i32>,
    pub phase_id: Option<i32>,
    pub round: Option<i32>,
    pub attendance: Option<i32>,
    pub stadium_id: Option<i32>,
    pub referee_id: Option<i32>,
    pub home_score: Option<i32>,
    pub away_score: Option<i32>,
    pub home_pen: Option<i32>,
    pub away_pen: Option<i32>,
    pub played: Option<bool>,
    pub updater_id: i32,
    pub updated_at: NaiveDateTime,
    pub home_aet: Option<i32>,
    pub away_aet: Option<i32>,
    pub date: NaiveDateTime,
    pub has_time: Option<bool>,
    pub home_field: i32,
    pub home_importance: Option<f32>,
    pub away_importance: Option<f32>,
    pub soccerway_id: Option<String>,
}

#[derive(Queryable, Debug, Associations, Identifiable, Selectable)]
#[diesel(belongs_to(Phase))]
pub struct Game {
    pub id: i32,
    pub home_id: i32,
    pub away_id: i32,
    pub phase_id: i32,
    pub home_score: i32,
    pub away_score: i32,
    pub home_aet: Option<i32>,
    pub away_aet: Option<i32>,
    pub date: NaiveDateTime,
    pub home_field: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
pub struct Goal {
    pub id: i32,
    pub player_id: i32,
    pub game_id: Option<i32>,
    pub team_id: i32,
    pub time: i32,
    pub penalty: bool,
    pub own_goal: bool,
    pub aet: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Group {
    pub id: i32,
    pub phase_id: i32,
    pub name: String,
    pub promoted: i32,
    pub relegated: i32,
    pub odds_progress: Option<i32>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub zones: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
pub struct HistoricalRating {
    pub id: i32,
    pub team_id: i32,
    pub rating: f32,
    pub measure_date: NaiveDate,
    pub off_rating: f32,
    pub def_rating: f32,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct OpenIdAuthenticationAssociation {
    pub id: i32,
    pub issued: Option<i32>,
    pub lifetime: Option<i32>,
    pub handle: Option<String>,
    pub assoc_type: Option<String>,
    pub server_url: Option<Vec<u8>>,
    pub secret: Option<Vec<u8>>,
}

#[derive(Queryable, Identifiable, Debug, Associations)]
#[diesel(belongs_to(Championship))]
pub struct Phase {
    pub id: i32,
    pub championship_id: i32,
    pub name: String,
    pub order_by: i32,
    pub sort: String,
    pub bonus_points: i32,
    pub bonus_points_threshold: i32,
    // pub created_at: NaiveDateTime,
    // pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
pub struct PlayerGame {
    pub id: i32,
    pub player_id: i32,
    pub game_id: i32,
    pub team_id: i32,
    pub on: i32,
    pub off: i32,
    pub yellow: bool,
    pub red: bool,
    pub off_rating: Option<f32>,
    pub def_rating: Option<f32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
pub struct Player {
    pub id: i32,
    pub name: String,
    pub position: Option<String>,
    pub birth: Option<NaiveDate>,
    pub country: Option<String>,
    pub full_name: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub soccerway_id: Option<String>,
    pub rating: Option<f32>,
    pub off_rating: Option<f32>,
    pub def_rating: Option<f32>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct RefereeChamp {
    pub id: i32,
    pub referee_id: i32,
    pub championship_id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Referee {
    pub id: i32,
    pub name: String,
    pub location: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Role {
    pub id: i32,
    pub name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = stadia)]
pub struct Stadium {
    pub id: i32,
    pub name: String,
    pub full_name: Option<String>,
    pub city: Option<String>,
    pub country: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct TeamGroup {
    pub id: i32,
    pub group_id: i32,
    pub team_id: i32,
    pub add_sub: i32,
    pub bias: i32,
    pub comment: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub odds: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct TeamPlayer {
    pub id: i32,
    pub team_id: i32,
    pub player_id: i32,
    pub championship_id: i32,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Team {
    pub id: i32,
    pub name: String,
    pub country: String,
    pub legacy_logo: Option<String>,
    pub city: Option<String>,
    pub stadium_id: Option<i32>,
    pub foundation: Option<NaiveDate>,
    pub full_name: Option<String>,
    pub logo_file_name: Option<String>,
    pub logo_content_type: Option<String>,
    pub logo_file_size: Option<i32>,
    pub logo_updated_at: Option<NaiveDateTime>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub rating: Option<f32>,
    pub off_rating: Option<f32>,
    pub def_rating: Option<f32>,
    pub team_type: i32,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct User {
    pub id: i32,
    pub login: Option<String>,
    pub email: Option<String>,
    pub crypted_password: Option<String>,
    pub salt: Option<String>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub remember_token: Option<String>,
    pub remember_token_expires_at: Option<NaiveDateTime>,
    pub identity_url: Option<String>,
    pub name: Option<String>,
    pub location: Option<String>,
    pub birthday: Option<NaiveDate>,
    pub about_me: Option<String>,
    pub last_login: Option<NaiveDateTime>,
    pub avatar_file_name: Option<String>,
    pub avatar_content_type: Option<String>,
    pub avatar_file_size: Option<i32>,
    pub avatar_updated_at: Option<NaiveDateTime>,
    pub openid_connect_token: Option<String>,
}
